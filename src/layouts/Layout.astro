---
import "../styles/global.css";
import noise from "../assets/noise-light.png";
import noiseDark from "../assets/noise-dark.png";
import "@fontsource/geist-mono";
import "@fontsource/geist-sans";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";

interface Props {
	title?: string;
}

const { title = 'Pere Montpe√≥' } = Astro.props as Props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" media="(prefers-color-scheme: dark)">
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" media="(prefers-color-scheme: light)">
		<link rel="icon" type="image/x-icon" href="/favicon.svg">
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<script is:inline>
			function preloadTheme() {
				const userTheme = localStorage.theme;

				if (userTheme === "light" || userTheme === "dark") {
					toggleTheme(userTheme === "dark");
				} else {
					toggleTheme(true);
				}
			}

			function toggleTheme(dark) {
				const css = document.createElement("style");

				css.appendChild(
					document.createTextNode(
						`* {
							-webkit-transition: none !important;
							-moz-transition: none !important;
							-o-transition: none !important;
							-ms-transition: none !important;
							transition: none !important;
						}
						`,
					)
				);

				document.head.appendChild(css);

				if (dark) {
					document.documentElement.classList.add("dark");
				} else {
					document.documentElement.classList.remove("dark");
				}

				window.getComputedStyle(css).opacity;
				document.head.removeChild(css);
			}

			preloadTheme();
		</script>
	</head>
	<body>
		<div class="page-layout">
			<header class="page-header">
				<Header />
			</header>
			<main class="page-main">
				<slot />
			</main>
			<footer class="page-footer">
				<Footer />
			</footer>
		</div>
	</body>
</html>

<script>
	function init() {
		onScroll();
		animate();

		const lightThemeButton = document.getElementById("light-theme-button");
		lightThemeButton?.addEventListener("click", () => {
			localStorage.setItem("theme", "light");
			toggleTheme(false);
		});

		const darkThemeButton = document.getElementById("dark-theme-button");
		darkThemeButton?.addEventListener("click", () => {
			localStorage.setItem("theme", "dark");
			toggleTheme(true);
		});

		const systemThemeButton = document.getElementById("system-theme-button");
		systemThemeButton?.addEventListener("click", () => {
			localStorage.setItem("theme", "system");
			toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
		});

		window.matchMedia("(prefers-color-scheme: dark)")
			.addEventListener("change", event => {
				if (localStorage.theme === "system") {
					toggleTheme(event.matches);
				}
			}
		);

		document.addEventListener("scroll", onScroll);
	}

	function animate() {
		const animateElements = document.querySelectorAll(".animate");

		animateElements.forEach((element, index) => {
			setTimeout(() => {
				element.classList.add("show");
			}, index * 150);
		});
	}

	function onScroll() {
		if (window.scrollY > 0) {
			document.documentElement.classList.add("scrolled");
		} else {
			document.documentElement.classList.remove("scrolled");
		}
	}

	function toggleTheme(dark: boolean) {
		const css = document.createElement("style");

		css.appendChild(
			document.createTextNode(
				`* {
					-webkit-transition: none !important;
					-moz-transition: none !important;
					-o-transition: none !important;
					-ms-transition: none !important;
					transition: none !important;
				}
				`,
			)
		);

		document.head.appendChild(css);

		if (dark) {
			document.documentElement.classList.add("dark");
		} else {
			document.documentElement.classList.remove("dark");
		}

		window.getComputedStyle(css).opacity;
		document.head.removeChild(css);
	}

	document.addEventListener("DOMContentLoaded", () => init());
	document.addEventListener("astro:after-swap", () => init());
</script>

<style
	define:vars={{
		noiseUrl: `url(${noise.src})`,
		noiseDarkUrl: `url(${noiseDark.src})`,
	}}
>
	html, body {
		height: 100%;
		margin: 0;
		padding: 0;
	}

	body {
		background-image: var(--noiseUrl);
		background-size: auto;
		background-repeat: repeat;
		background-attachment: fixed; /* Keep noise fixed */
		background-clip: border-box;
		background-origin: padding-box;
		background-position: 0 0;
		background-color: var(--background); /* Ensure background color uses variable */
		/* Font-family and color are inherited from global.css */
	}

	.dark body {
		background-image: var(--noiseDarkUrl);
	}

	.page-layout {
		display: flex; /* Use flex for simpler footer sticking */
		flex-direction: column;
		min-height: 100vh;
	}

	.page-header {
		/* Header styles are handled by Header.astro component */
		position: sticky; /* Ensure header remains sticky */
		top: 0;
		z-index: 100;
	}

	.page-main {
		flex-grow: 1; /* Allow main content to take available space */
	}

	.page-footer {
		/* Footer styles are handled by Footer.astro component */
		margin-top: auto; /* Push footer to bottom */
	}
</style>
