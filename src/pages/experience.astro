---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';
import { formatDate } from '../utils/date'; // Import formatDate

// Get all entries from the 'experience' collection
const experiences = (await getCollection('experience')).sort(
  (a, b) => b.data.startDate.valueOf() - a.data.startDate.valueOf()
);
---

<Layout title="Experiència | Pere Montpeó">
  <main class="container">
    <section class="experience-section section">
      <div class="experiences">
        {experiences.map((exp, index) => (
          <div class="card">
            <div class="experience-content">
              <h2 class="job-title">{exp.data.role}</h2>
              <p class="company-name text-muted">{exp.data.company}</p>

              <p class="date-range text-muted">
                {formatDate(exp.data.startDate)} - 
                {exp.data.endDate ? formatDate(exp.data.endDate) : 'Present'}
              </p>

              <div class="description">
                <p>{exp.data.description}</p>
              </div>

              {/* Container for the markdown body content */}
              <div class="markdown-content" id={`markdown-content-${index}`}>
                <Fragment set:html={exp.body} />
              </div>

              {/* Show more button */}
              {exp.body.trim() && (
                <div class="show-more-container">
                  <button class="show-more-button button-link" aria-expanded="false" aria-controls={`markdown-content-${index}`}>
                    <span>Show more</span>
                    <span class="arrow-down">▼</span>
                  </button>
                </div>
              )}

              {exp.data.tags && exp.data.tags.length > 0 && (
                <div class="skills-section">
                  <h3>Skills & Technologies</h3>
                  <div class="tags">
                    {exp.data.tags.map(tag => (
                      <span class="tag">{tag}</span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </section>
  </main>
</Layout>

<style>
  .experiences {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    max-width: 800px;
    margin: 0 auto;
  }

  /* Styles specific to content *inside* the .card */
  .card .job-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
    border-bottom: none;
    padding-bottom: 0;
    margin-top: 0;
  }

  .card .company-name {
    font-size: 1.125rem;
    margin-bottom: 0.5rem;
  }

  .card .date-range {
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }

  .card .description p {
     margin-bottom: 1rem;
     line-height: 1.5;
  }

  .card .skills-section {
    margin-top: 1.5rem;
    padding-top: 1rem;
    border-top: 1px solid var(--border);
  }

  .card .skills-section h3 {
    font-size: 1rem;
    margin-bottom: 0.75rem;
  }

  .card .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  /* Styles for the initially hidden markdown content */
  .markdown-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.4s ease-out, margin-top 0.4s ease-out, opacity 0.4s ease-out;
    margin-top: 0;
    opacity: 0;
    line-height: 1.6;
  }

  .markdown-content.expanded {
    max-height: 1000px;
    margin-top: 1rem;
    opacity: 1;
    transition: max-height 0.4s ease-in, margin-top 0.4s ease-in, opacity 0.4s ease-in;
  }

  /* Global markdown content styling (can move to global.css if used elsewhere) */
  .markdown-content :global(p),
  .markdown-content :global(ul),
  .markdown-content :global(ol) {
    margin-bottom: 1em;
  }
  .markdown-content :global(ul),
  .markdown-content :global(ol) {
    margin-left: 1.5rem;
  }
  .markdown-content :global(li) {
    margin-bottom: 0.5em;
  }
  .markdown-content :global(a) {
    /* Inherit global link styles */
  }
  .markdown-content :global(strong) {
    font-weight: 600;
  }
  .markdown-content :global(code) {
     font-family: 'Geist Mono', monospace;
     background-color: var(--secondary);
     padding: 0.1em 0.3em;
     border-radius: 4px;
     font-size: 0.9em;
  }
  .markdown-content :global(pre) {
     background-color: var(--secondary);
     padding: 1em;
     border-radius: var(--radius);
     overflow-x: auto;
     margin-bottom: 1em;
  }
   .markdown-content :global(pre code) {
      background-color: transparent;
      padding: 0;
      border-radius: 0;
      font-size: 0.85em;
   }


  /* Show more button specific styles */
  .show-more-container {
    display: flex;
    justify-content: center;
    margin: 1rem 0 0;
  }

  .arrow-down {
    font-size: 0.7rem;
    transition: transform 0.3s ease;
    margin-left: 0.25rem;
  }

  /* Rotation handled by JS adding/removing class or direct style */
  .show-more-button[aria-expanded="true"] .arrow-down {
      transform: rotate(180deg);
  }

  @media (min-width: 768px) {
    .card {
      padding: 2rem;
    }
    .card .job-title {
      font-size: 1.75rem;
    }
  }
</style>
