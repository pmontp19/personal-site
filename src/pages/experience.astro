---
import { getCollection } from 'astro:content';
import Layout from '../layouts/Layout.astro';

// Get all entries from the 'experience' collection
const experiences = (await getCollection('experience')).sort(
  (a, b) => b.data.startDate.valueOf() - a.data.startDate.valueOf()
);
---

<Layout title="Work Experience">
  <main class="container">
    <section class="experience-section">
      <h1>Work Experience</h1>
      <p class="subtitle">My professional journey and the skills I've developed along the way</p>
      
      <div class="experiences">
        {experiences.map((exp, index) => (
          <div class="experience-card"> 
            <div class="experience-content">
              <h2 class="job-title">{exp.data.role}</h2>
              <p class="company-name">{exp.data.company}</p>
              
              <p class="date-range">
                {exp.data.startDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short' })} - 
                {exp.data.endDate ? exp.data.endDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short' }) : 'Present'}
              </p>
              
              <div class="description">
                <p>{exp.data.description}</p>
              </div>

              {/* Container for the markdown body content */}
              <div class="markdown-content" id={`markdown-content-${index}`}>
                <Fragment set:html={exp.body} />
              </div>

              {/* Re-add Show more button if body exists */}
              {exp.body.trim() && (
                <div class="show-more-container">
                  <button class="show-more-button" aria-expanded="false" aria-controls={`markdown-content-${index}`}>
                    <span>Show more</span>
                    <span class="arrow-down">â–¼</span>
                  </button>
                </div>
              )}
              
              {exp.data.tags && exp.data.tags.length > 0 && (
                <div class="skills-section">
                  <h3>Skills & Technologies</h3>
                  <div class="tags">
                    {exp.data.tags.map(tag => (
                      <span class="tag">{tag}</span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </section>
  </main>
</Layout>

<style>
  .experience-section {
    padding: 2rem 0 3rem;
  }

  h1 {
    font-size: 2.5rem;
    font-weight: 700;
    text-align: center;
    margin-bottom: 0.5rem;
  }

  .subtitle {
    color: var(--text-muted);
    font-size: 1.125rem;
    text-align: center;
    margin-bottom: 2.5rem;
    max-width: 650px;
    margin-left: auto;
    margin-right: auto;
  }

  .experiences {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    max-width: 900px; /* Keep max-width or adjust as needed */
    margin: 0 auto;
  }

  .experience-card {
    background-color: var(--card);
    color: var(--card-foreground);
    border: 1px solid var(--border);
    border-radius: var(--radius); /* Use global radius */
    padding: 1.5rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); /* Optional subtle shadow */
    transition: border-color 0.2s ease; /* Smooth transition */
  }

  /* Optional: Add a subtle hover effect */
  .experience-card:hover {
    border-color: var(--border-muted); 
  }

  .job-title {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 0.25rem;
  }

  .company-name {
    font-size: 1.25rem;
    color: var(--text-muted);
    margin-bottom: 0.5rem;
  }

  .date-range {
    font-size: 0.9rem;
    color: var(--text-muted);
    margin-bottom: 1rem;
  }

  .description {
    margin-bottom: 1rem;
    line-height: 1.5;
  }

  /* Styles for the initially hidden markdown content */
  .markdown-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.4s ease-out, margin-top 0.4s ease-out;
    margin-top: 0;
    line-height: 1.6; /* Adjust line-height for readability */
  }

  .markdown-content.expanded {
    max-height: 1000px; /* Adjust as needed, should be larger than expected content */
    margin-top: 1rem; /* Add space when expanded */
    transition: max-height 0.4s ease-in, margin-top 0.4s ease-in;
  }

  /* Ensure paragraphs inside markdown have margin */
  .markdown-content :global(p) {
    margin-bottom: 1em;
  }
  .markdown-content :global(ul),
  .markdown-content :global(ol) {
    margin-left: 1.5rem;
    margin-bottom: 1em;
  }
  .markdown-content :global(li) {
    margin-bottom: 0.5em;
  }

  /* Re-add Show more button styles */
  .show-more-container {
    display: flex;
    justify-content: center;
    margin: 1rem 0 0; /* Adjust margin */
  }

  .show-more-button {
    display: inline-flex; /* Use inline-flex */
    align-items: center;
    gap: 0.5rem;
    background: none;
    border: none;
    font-size: 0.95rem;
    color: var(--primary); /* Use primary color for interaction */
    cursor: pointer;
    padding: 0.25rem 0.5rem; /* Add some padding */
    border-radius: var(--radius);
    transition: background-color 0.2s ease;
  }
  .show-more-button:hover {
     background-color: var(--secondary);
     text-decoration: none; /* Remove underline on hover */
  }

  .arrow-down {
    font-size: 0.7rem;
    transition: transform 0.3s ease;
  }

  .markdown-content.expanded + .show-more-container .arrow-down {
      transform: rotate(180deg);
  }

  .skills-section {
    margin-top: 1.5rem;
  }

  .skills-section h3 {
    font-size: 1rem;
    margin-bottom: 0.75rem;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .tag {
    background-color: var(--secondary); /* Use --secondary instead of --bg-secondary */
    color: var(--foreground); /* Use --foreground instead of --text-color */
    font-size: 0.85rem;
    padding: 0.35rem 0.75rem;
    border-radius: 2rem;
    display: inline-block;
  }

  @media (min-width: 768px) {
    .experience-card {
      padding: 2rem; /* Keep or adjust padding for larger screens */
    }

    .job-title {
      font-size: 1.75rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const showMoreButtons = document.querySelectorAll('.show-more-button');
    
    showMoreButtons.forEach(button => {
      button.addEventListener('click', () => {
        const controlsId = button.getAttribute('aria-controls');
        // Ensure controlsId exists before proceeding
        if (!controlsId) {
          console.error('Button is missing aria-controls attribute:', button);
          return; 
        }

        const content = document.getElementById(controlsId);
        const arrow = button.querySelector('.arrow-down');
        const buttonTextSpan = button.querySelector('span:first-child'); // Get the text span

        // Ensure all required elements were found
        if (!content || !arrow || !buttonTextSpan) {
          console.error('Could not find required elements for button:', button);
          return;
        }
        
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        
        if (isExpanded) {
          content.classList.remove('expanded');
          button.setAttribute('aria-expanded', 'false');
          (arrow as HTMLElement).style.transform = 'rotate(0deg)'; // Reset arrow rotation
          buttonTextSpan.textContent = 'Show more'; // Update text
        } else {
          content.classList.add('expanded');
          button.setAttribute('aria-expanded', 'true');
          (arrow as HTMLElement).style.transform = 'rotate(180deg)'; // Rotate arrow
          buttonTextSpan.textContent = 'Show less'; // Update text
        }
      });
    });
  });
</script>
