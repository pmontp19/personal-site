---
interface Props {
  class?: string;
}

const { class: className } = Astro.props;
---

<div class:list={["magic-card", className]}>
  <div class="magic-card-content">
    <slot />
  </div>
  <div class="spotlight"></div>
</div>

<style>
  .magic-card {
    position: relative;
    isolation: isolate;
    overflow: hidden;
    border-radius: 0.5rem;
    border: 1px solid #1e293b;
    background-color: var(--card, #111827);
    transition: border-color 0.3s ease;
  }

  .magic-card:hover {
    border-color: rgba(99, 102, 241, 0.4);
  }

  .magic-card-content {
    position: relative;
    z-index: 1;
    padding: 1rem;
  }

  @media (min-width: 768px) {
    .magic-card-content {
      padding: 1.5rem;
    }
  }

  .spotlight {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: radial-gradient(
      circle at var(--x, 50%) var(--y, 50%),
      rgba(99, 102, 241, 0.15) 0%,
      transparent 80%
    );
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 0;
  }

  .magic-card:hover .spotlight {
    opacity: 1;
  }
</style>

<script>
  // Handle the spotlight effect
  const initMagicCards = () => {
    const magicCards = document.querySelectorAll('.magic-card');
    
    magicCards.forEach(card => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        // Update CSS variables for the spotlight position
        card.style.setProperty('--x', `${x}px`);
        card.style.setProperty('--y', `${y}px`);
      });
    });
  };

  // Initialize on page load and after any potential dynamic content updates
  document.addEventListener('DOMContentLoaded', initMagicCards);
  document.addEventListener('astro:page-load', initMagicCards);
</script>