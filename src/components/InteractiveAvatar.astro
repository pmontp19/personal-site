---
// Interactive Avatar Component
import { Image } from "astro:assets";
import avatarImage from "../assets/avatar.png";

let isWinking = false;
let isBlinking = false;
---

<div id="avatarContainer">
    <div class="face-container">
        <Image
            src={avatarImage}
            alt="Avatar"
            class="avatar-image"
            loading="eager"
        />

        <div class="eyes-overlay">
            <svg
                viewBox="0 0 200 200"
                xmlns="http://www.w3.org/2000/svg"
                class="eyes-svg"
            >
                <g class="eye">
                    <circle cx="74" cy="71" r="6" fill="#fdf4e4"></circle>
                    <ellipse
                        id="leftPupil"
                        cx="74"
                        cy="71"
                        rx="3.5"
                        ry="5"
                        fill="#111827"></ellipse>
                </g>

                <g id="rightEye" class="eye">
                    <circle cx="106" cy="71" r="6" fill="#fdf4e4"></circle>
                    <ellipse
                        id="rightPupil"
                        cx="106"
                        cy="71"
                        rx="3.5"
                        ry="5"
                        fill="#111827"></ellipse>
                </g>

                <g class="eye-wink hidden">
                    <rect
                        id="winkRect"
                        x="102"
                        y="70"
                        width="10"
                        height="3"
                        rx="1.5"
                        fill="#111827"
                        class="wink"></rect>
                </g>
                
                <g class="eye-blink hidden">
                    <rect
                        id="leftBlinkRect"
                        x="70"
                        y="70"
                        width="10"
                        height="3"
                        rx="1.5"
                        fill="#111827"
                        class="blink"></rect>
                    <rect
                        id="rightBlinkRect"
                        x="102"
                        y="70"
                        width="10"
                        height="3"
                        rx="1.5"
                        fill="#111827"
                        class="blink"></rect>
                </g>
            </svg>
        </div>
    </div>
</div>

<script>
    let isWinking = false;
    let isBlinking = false;

    let avatarContainer: HTMLElement | null = null;
    let leftPupil: SVGElement | null = null;
    let rightPupil: SVGElement | null = null;
    let winkElement: SVGGElement | null = null;
    let winkRect: SVGRectElement | null = null;
    let blinkElement: SVGGElement | null = null;
    let leftBlinkRect: SVGRectElement | null = null;
    let rightBlinkRect: SVGRectElement | null = null;

    /**
     * Updates the position of an SVG element (pupil or wink).
     * @param {SVGElement | null} element - The SVG element to move.
     * @param {number} baseX - The base X coordinate (center).
     * @param {number} baseY - The base Y coordinate (center).
     * @param {number} offsetX - The calculated horizontal offset based on cursor/touch.
     * @param {number} offsetY - The calculated vertical offset based on cursor/touch.
     */
    function updateElementPosition(
        element: SVGElement | null,
        baseX: number,
        baseY: number,
        offsetX: number,
        offsetY: number,
    ) {
        if (!element) return;

        const newX = (baseX + offsetX).toString();
        const newY = (baseY + offsetY).toString();

        if (element.tagName.toLowerCase() === "ellipse") {
            element.setAttribute("cx", newX);
            element.setAttribute("cy", newY);
        } else if (element.tagName.toLowerCase() === "rect") {
            element.setAttribute("x", newX);
            element.setAttribute("y", newY);
        }
    }

    /**
     * Handles mouse and touch movement to make the eyes follow.
     * @param {number} clientX - The client X coordinate from the event.
     * @param {number} clientY - The client Y coordinate from the event.
     */
    function handlePointerMove(event: MouseEvent | TouchEvent) {
        if (!avatarContainer) return;

        let clientX: number
        let clientY: number;

        if (event instanceof MouseEvent) {
            clientX = event.clientX;
            clientY = event.clientY;
        } else { 
            clientX = event.touches[0].clientX;
            clientY = event.touches[0].clientY;
        }

        const avatarRect = avatarContainer.getBoundingClientRect();
        const avatarCenterX = avatarRect.left + (avatarRect.width * 90) / 200;
        const avatarCenterY = avatarRect.top + (avatarRect.height * 64) / 200;

        const deltaX = clientX - avatarCenterX;
        const deltaY = clientY - avatarCenterY;

        const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
        const maxDistance = 4;
        const clampedDistance = Math.min(distance, maxDistance);

        const normalizedX = distance === 0 ? 0 : (deltaX / distance) * clampedDistance;
        const normalizedY = distance === 0 ? 0 : (deltaY / distance) * clampedDistance;

        updateElementPosition(leftPupil, 74, 71, normalizedX, normalizedY);
        updateElementPosition(rightPupil, 106, 71, normalizedX, normalizedY);
        updateElementPosition(winkRect, 102, 70, normalizedX, normalizedY);
        updateElementPosition(leftBlinkRect, 70, 70, normalizedX, normalizedY);
        updateElementPosition(rightBlinkRect, 102, 70, normalizedX, normalizedY);
    }

    /**
     * Triggers the wink animation using CSS classes.
     */
    function triggerWink() {
        if (!isWinking && !isBlinking && rightPupil && winkElement) {
            isWinking = true;

            rightPupil.classList.add("hidden");
            winkElement.classList.remove("hidden");

            setTimeout(() => {
                if (rightPupil) rightPupil.classList.remove("hidden");
                if (winkElement) winkElement.classList.add("hidden");
                isWinking = false;
            }, 300);
        }
    }

    /**
     * Triggers the blink animation for both eyes.
     */
    function triggerBlink() {
        if (!isBlinking && !isWinking && leftPupil && rightPupil && blinkElement) {
            isBlinking = true;

            // Hide both pupils
            leftPupil.classList.add("hidden");
            rightPupil.classList.add("hidden");
            
            // Show blink elements
            blinkElement.classList.remove("hidden");

            setTimeout(() => {
                // Restore normal state
                if (leftPupil) leftPupil.classList.remove("hidden");
                if (rightPupil) rightPupil.classList.remove("hidden");
                if (blinkElement) blinkElement.classList.add("hidden");
                isBlinking = false;
            }, 200); // Slightly faster than wink for natural look
        }
    }

    /**
     * Initializes the component, caches elements, and sets up listeners.
     */
    function initializeAvatar() {
        avatarContainer = document.getElementById("avatarContainer");
        leftPupil = document.getElementById("leftPupil") as SVGElement | null;
        rightPupil = document.getElementById("rightPupil") as SVGElement | null;
        winkElement = document.querySelector(".eye-wink") as SVGGElement | null;
        winkRect = document.getElementById("winkRect") as SVGRectElement | null;
        blinkElement = document.querySelector(".eye-blink") as SVGGElement | null;
        leftBlinkRect = document.getElementById("leftBlinkRect") as SVGRectElement | null;
        rightBlinkRect = document.getElementById("rightBlinkRect") as SVGRectElement | null;

        if (winkElement) {
             winkElement.classList.add("hidden");
        }
        if (blinkElement) {
             blinkElement.classList.add("hidden");
        }
        if (rightPupil) {
            rightPupil.classList.remove("hidden");
        }
        if (leftPupil) {
            leftPupil.classList.remove("hidden");
        }

        if (!avatarContainer) {
            console.error("Avatar container not found!");
            return;
        }

        window.addEventListener("mousemove", (e: MouseEvent) => {
            handlePointerMove(e);
        });

        window.addEventListener("touchmove", (e: TouchEvent) => {
            if (e.touches.length > 0) {
                handlePointerMove(e);
            }
        }, { passive: true });

        avatarContainer.addEventListener("click", triggerWink);
        avatarContainer.addEventListener("touchstart", (e) => {
             e.preventDefault();
             triggerWink();
        }, { passive: false });

        // Regular blinking interval - humans blink every 4-6 seconds on average
        const blinkInterval = setInterval(() => {
            triggerBlink();
        }, 5000 + Math.random() * 2000); // Random time between 5-7 seconds

        document.addEventListener("astro:before-swap", () => {
            window.removeEventListener("mousemove", handlePointerMove as EventListener);
            window.removeEventListener("touchmove", handlePointerMove as EventListener);
            clearInterval(blinkInterval);
        }, { once: true });
    }

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", initializeAvatar);
    } else {
        initializeAvatar();
    }
</script>

<style>
    #avatarContainer {
        position: relative;
        height: 12rem;
        width: 12rem;
        overflow: hidden;
        border-radius: 9999px;
        background-color: #1f2937;
    }

    @media (min-width: 640px) {
        #avatarContainer {
            height: 14rem;
            width: 14rem;
        }
    }

    @media (min-width: 768px) {
        #avatarContainer {
            height: 16rem;
            width: 16rem;
        }
    }

    .face-container {
        position: absolute;
        height: 100%;
        width: 100%;
    }

    .avatar-image {
        position: absolute;
        inset: 0;
        height: 100%;
        width: 100%;
        object-fit: cover;
        z-index: 1;
    }

    .eyes-overlay {
        position: absolute;
        inset: 0;
        height: 100%;
        width: 100%;
        z-index: 2;
        pointer-events: none;
    }

    .hidden {
        display: none !important;
    }

    #leftPupil,
    #rightPupil,
    #winkRect,
    #leftBlinkRect,
    #rightBlinkRect {
        transition:
            cx 0.1s ease-out,
            cy 0.1s ease-out,
            x 0.1s ease-out,
            y 0.1s ease-out;
    }
</style>
